{
  "version": 3,
  "sources": ["../../striptags/src/striptags.js"],
  "sourcesContent": ["'use strict';\n\n(function (global) {\n\n    // minimal symbol polyfill for IE11 and others\n    if (typeof Symbol !== 'function') {\n        var Symbol = function(name) {\n            return name;\n        }\n\n        Symbol.nonNative = true;\n    }\n\n    const STATE_PLAINTEXT = Symbol('plaintext');\n    const STATE_HTML      = Symbol('html');\n    const STATE_COMMENT   = Symbol('comment');\n\n    const ALLOWED_TAGS_REGEX  = /<(\\w*)>/g;\n    const NORMALIZE_TAG_REGEX = /<\\/?([^\\s\\/>]+)/;\n\n    function striptags(html, allowable_tags, tag_replacement) {\n        html            = html || '';\n        allowable_tags  = allowable_tags || [];\n        tag_replacement = tag_replacement || '';\n\n        let context = init_context(allowable_tags, tag_replacement);\n\n        return striptags_internal(html, context);\n    }\n\n    function init_striptags_stream(allowable_tags, tag_replacement) {\n        allowable_tags  = allowable_tags || [];\n        tag_replacement = tag_replacement || '';\n\n        let context = init_context(allowable_tags, tag_replacement);\n\n        return function striptags_stream(html) {\n            return striptags_internal(html || '', context);\n        };\n    }\n\n    striptags.init_streaming_mode = init_striptags_stream;\n\n    function init_context(allowable_tags, tag_replacement) {\n        allowable_tags = parse_allowable_tags(allowable_tags);\n\n        return {\n            allowable_tags : allowable_tags,\n            tag_replacement: tag_replacement,\n\n            state         : STATE_PLAINTEXT,\n            tag_buffer    : '',\n            depth         : 0,\n            in_quote_char : ''\n        };\n    }\n\n    function striptags_internal(html, context) {\n        if (typeof html != \"string\") {\n            throw new TypeError(\"'html' parameter must be a string\");\n        }\n\n        let allowable_tags  = context.allowable_tags;\n        let tag_replacement = context.tag_replacement;\n\n        let state         = context.state;\n        let tag_buffer    = context.tag_buffer;\n        let depth         = context.depth;\n        let in_quote_char = context.in_quote_char;\n        let output        = '';\n\n        for (let idx = 0, length = html.length; idx < length; idx++) {\n            let char = html[idx];\n\n            if (state === STATE_PLAINTEXT) {\n                switch (char) {\n                    case '<':\n                        state       = STATE_HTML;\n                        tag_buffer += char;\n                        break;\n\n                    default:\n                        output += char;\n                        break;\n                }\n            }\n\n            else if (state === STATE_HTML) {\n                switch (char) {\n                    case '<':\n                        // ignore '<' if inside a quote\n                        if (in_quote_char) {\n                            break;\n                        }\n\n                        // we're seeing a nested '<'\n                        depth++;\n                        break;\n\n                    case '>':\n                        // ignore '>' if inside a quote\n                        if (in_quote_char) {\n                            break;\n                        }\n\n                        // something like this is happening: '<<>>'\n                        if (depth) {\n                            depth--;\n\n                            break;\n                        }\n\n                        // this is closing the tag in tag_buffer\n                        in_quote_char = '';\n                        state         = STATE_PLAINTEXT;\n                        tag_buffer   += '>';\n\n                        if (allowable_tags.has(normalize_tag(tag_buffer))) {\n                            output += tag_buffer;\n                        } else {\n                            output += tag_replacement;\n                        }\n\n                        tag_buffer = '';\n                        break;\n\n                    case '\"':\n                    case '\\'':\n                        // catch both single and double quotes\n\n                        if (char === in_quote_char) {\n                            in_quote_char = '';\n                        } else {\n                            in_quote_char = in_quote_char || char;\n                        }\n\n                        tag_buffer += char;\n                        break;\n\n                    case '-':\n                        if (tag_buffer === '<!-') {\n                            state = STATE_COMMENT;\n                        }\n\n                        tag_buffer += char;\n                        break;\n\n                    case ' ':\n                    case '\\n':\n                        if (tag_buffer === '<') {\n                            state      = STATE_PLAINTEXT;\n                            output    += '< ';\n                            tag_buffer = '';\n\n                            break;\n                        }\n\n                        tag_buffer += char;\n                        break;\n\n                    default:\n                        tag_buffer += char;\n                        break;\n                }\n            }\n\n            else if (state === STATE_COMMENT) {\n                switch (char) {\n                    case '>':\n                        if (tag_buffer.slice(-2) == '--') {\n                            // close the comment\n                            state = STATE_PLAINTEXT;\n                        }\n\n                        tag_buffer = '';\n                        break;\n\n                    default:\n                        tag_buffer += char;\n                        break;\n                }\n            }\n        }\n\n        // save the context for future iterations\n        context.state         = state;\n        context.tag_buffer    = tag_buffer;\n        context.depth         = depth;\n        context.in_quote_char = in_quote_char;\n\n        return output;\n    }\n\n    function parse_allowable_tags(allowable_tags) {\n        let tag_set = new Set();\n\n        if (typeof allowable_tags === 'string') {\n            let match;\n\n            while ((match = ALLOWED_TAGS_REGEX.exec(allowable_tags))) {\n                tag_set.add(match[1]);\n            }\n        }\n\n        else if (!Symbol.nonNative &&\n                 typeof allowable_tags[Symbol.iterator] === 'function') {\n\n            tag_set = new Set(allowable_tags);\n        }\n\n        else if (typeof allowable_tags.forEach === 'function') {\n            // IE11 compatible\n            allowable_tags.forEach(tag_set.add, tag_set);\n        }\n\n        return tag_set;\n    }\n\n    function normalize_tag(tag_buffer) {\n        let match = NORMALIZE_TAG_REGEX.exec(tag_buffer);\n\n        return match ? match[1].toLowerCase() : null;\n    }\n\n    if (typeof define === 'function' && define.amd) {\n        // AMD\n        define(function module_factory() { return striptags; });\n    }\n\n    else if (typeof module === 'object' && module.exports) {\n        // Node\n        module.exports = striptags;\n    }\n\n    else {\n        // Browser\n        global.striptags = striptags;\n    }\n}(this));\n"],
  "mappings": "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",
  "names": []
}
